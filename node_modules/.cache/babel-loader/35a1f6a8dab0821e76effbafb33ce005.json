{"ast":null,"code":"/**\n * This module unifies handling of mouse whee event accross different browsers\n *\n * See https://developer.mozilla.org/en-US/docs/Web/Reference/Events/wheel?redirectlocale=en-US&redirectslug=DOM%2FMozilla_event_reference%2Fwheel\n * for more details\n *\n * Usage:\n *  var addWheelListener = require('wheel');\n *  addWheelListener(domElement, function (e) {\n *    // mouse wheel event\n *  });\n */\nmodule.exports = addWheelListener;\n\nvar prefix = \"\",\n    _addEventListener,\n    onwheel,\n    support; // detect event model\n\n\nif (window.addEventListener) {\n  _addEventListener = \"addEventListener\";\n} else {\n  _addEventListener = \"attachEvent\";\n  prefix = \"on\";\n} // detect available wheel event\n\n\nsupport = \"onwheel\" in document.createElement(\"div\") ? \"wheel\" : // Modern browsers support \"wheel\"\ndocument.onmousewheel !== undefined ? \"mousewheel\" : // Webkit and IE support at least \"mousewheel\"\n\"DOMMouseScroll\"; // let's assume that remaining browsers are older Firefox\n\nfunction addWheelListener(elem, callback, useCapture) {\n  _addWheelListener(elem, support, callback, useCapture); // handle MozMousePixelScroll in older Firefox\n\n\n  if (support == \"DOMMouseScroll\") {\n    _addWheelListener(elem, \"MozMousePixelScroll\", callback, useCapture);\n  }\n}\n\n;\n\nfunction _addWheelListener(elem, eventName, callback, useCapture) {\n  elem[_addEventListener](prefix + eventName, support == \"wheel\" ? callback : function (originalEvent) {\n    !originalEvent && (originalEvent = window.event); // create a normalized event object\n\n    var event = {\n      // keep a ref to the original event object\n      originalEvent: originalEvent,\n      target: originalEvent.target || originalEvent.srcElement,\n      type: \"wheel\",\n      deltaMode: originalEvent.type == \"MozMousePixelScroll\" ? 0 : 1,\n      deltaX: 0,\n      delatZ: 0,\n      preventDefault: function preventDefault() {\n        originalEvent.preventDefault ? originalEvent.preventDefault() : originalEvent.returnValue = false;\n      }\n    }; // calculate deltaY (and deltaX) according to the event\n\n    if (support == \"mousewheel\") {\n      event.deltaY = -1 / 40 * originalEvent.wheelDelta; // Webkit also support wheelDeltaX\n\n      originalEvent.wheelDeltaX && (event.deltaX = -1 / 40 * originalEvent.wheelDeltaX);\n    } else {\n      event.deltaY = originalEvent.detail;\n    } // it's time to fire the callback\n\n\n    return callback(event);\n  }, useCapture || false);\n}","map":null,"metadata":{},"sourceType":"script"}